section     .text
global      _start

_start:
    xor     r15, r15    ; e15 for counting
    inc     r15

check15:
    xor     rdx, rdx
    mov     rax, r15
    mov     rcx, 15     ; 3 in edx
    div     rcx         ; divide edx:eax by 15, remainder in edx
    cmp     rdx, 0
    
    mov     rcx, fb     ; prep print
    mov     rdx, fblen
    jz      print
    
check3:
    xor     rdx, rdx
    mov     rax, r15
    mov     rcx, 3      ; 3 in edx
    div     rcx         ; divide edx:eax by 3, remainder in edx
    cmp     rdx, 0
    
    mov     rcx, fizz   ; prep print
    mov     rdx, len
    jz      print
    
check5:
    xor     rdx, rdx
    mov     rax, r15
    mov     rcx, 5      ; 3 in edx
    div     rcx         ; divide edx:eax by 5, remainder in edx
    cmp     rdx, 0
    
    mov     rcx, buzz   ; prep print
    mov     rdx, len
    jz      print
    
number:                 ; print the number, we are only here if we didnt     
    mov     rax, r15    
    mov     rcx, 10
    xor     r14, r14    ; make sure r14 is 0

loop1:
    xor     rdx, rdx    ; clear for division
    div     rcx         ; divide number (r15) with 10,
                        ; the qoutient is automatically set to rax again for next division
    add     rdx, 0x30   ; convert remainder to ascii
    push    rdx         ; push it to stack
    inc     r14         ; increments counter to remember stack size
    
    test    rax, rax    ; test if quotient is zero
    je      loop2       ; yes, we have no more numbers
    jmp     loop1       ; no, continue adding to the stack

loop2:
    ;print
    pop     rax         ; pop to rax
    mov     [numberstr], rax  ; put rax in numberstr value
    mov     rcx, numberstr    ; should be the number
    mov     rdx, 1            ; should be 1 as we only do single digits
    mov     rbx, 1
    mov     rax, 4
    int     0x80

    dec     r14         ; keep count of the amount of digits left
    test    r14, r14    ; if we have no more digits go to increment
    je      increment
    
    jmp loop2

increment:
    mov     rcx, newline
    mov     rdx, 1
    mov     rbx, 1
    mov     rax, 4
    int     0x80
    
    cmp     r15, 1000000    ; we only go to 100
    jz      end
    
    inc     r15         ; counter
    jmp     check15

;eax = 4 (SYS_WRITE)
;ebx = file descriptor (1 = screen)
;ecx = address of string
;edx = length of string
print:                  ; remember to prep edx and ecx
    mov     rbx, 1
    mov     rax, 4
    int     0x80        ; the system_call interrupt vector
    
    jmp     increment

end:                    ; end program
    mov     rax, 1
    int     0x80


section     .data
fb          db  "FizzBuzz"
fblen       equ $ - fb
fizz        db  "Fizz"
len         equ $ - fizz
buzz        db  "Buzz"
newline     db  0xa
numberstr db "000000000000000" ; just need enough space 
